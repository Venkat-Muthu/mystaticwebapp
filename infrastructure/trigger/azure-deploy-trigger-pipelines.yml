trigger: none
# this is being defined in app-ci pipeline
resources:
  pipelines:
  - pipeline: deployment   # Name of the pipeline resource
    source: build # Name of the pipeline referenced by the pipeline resource
    trigger: true

steps:
  - script: echo 'Build completed, now artifact will be downloaded'
  - task: Bash@3
    inputs:
      targetType: inline
      script: |

        echo "Current directory"
        echo $PWD

        echo "Build.ArtifactStagingDirectory : $(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory : $(Build.BinariesDirectory)"
        echo "SourcesDirectory : $(Build.SourcesDirectory)"
        echo "DefaultWorkingDirectory : $(System.DefaultWorkingDirectory)"
        echo "BuildDirectory : $(Agent.BuildDirectory)"

        echo "Switching directory to ArtifactStagingDirectory"
        cd $(Build.ArtifactStagingDirectory)
        echo $PWD
        echo $(cat ./src/index.html)

        echo "listing files"
        ls

        echo "Switching directory to SourcesDirectory"
        cd $(Build.SourcesDirectory)
        echo $PWD
        echo $(cat ./src/index.html)

        echo "listing files"
        ls

        echo "Switching directory to DefaultWorkingDirectory"
        cd $(System.DefaultWorkingDirectory)
        echo $PWD
        echo $(cat ./src/index.html)

        echo "listing files"
        ls

        echo "Switching directory to BuildDirectory"
        cd $(Agent.BuildDirectory)
        echo $PWD
        echo $(cat ./src/index.html)

        echo "listing files"
        ls

        echo "Switching to ArtifactStagingDirectory"
        cd $(Build.ArtifactStagingDirectory)
        echo $PWD
        echo $(cat ./src/index.html)

        echo "listing files"
        ls
# stages:
#   - stage: devdeploy
#     jobs:
#     - deployment: drop
#       pool:
#         vmimage: 'ubuntu-latest'
#       environment: dev
#       strategy:
#         runonce:
#           deploy:
#             steps:
#               - bash: echo "##vso[task.setvariable variable=myoutputvar;isoutput=true]this is the deployment variable value"
#                 name: setvarstep
#               - bash: echo $(setvarstep.myoutputvar)
#                 name: echovar
    
#     # Map the variable from the job.
#     - job: B
#       dependsOn: DEV
#       pool:
#         vmImage: 'ubuntu-16.04'
#       variables:
#         myVarFromDeploymentJob: $[ dependencies.DEV.outputs['DEV.setvarStep.myOutputVar'] ]
#       steps:
#       - script: "echo $(myVarFromDeploymentJob)"
#         name: echovar